// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "Racmacs_types.h"
#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

// ac_ag_names
std::vector<std::string> ac_ag_names(const AcMap map);
RcppExport SEXP _Racmacs_ac_ag_names(SEXP mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcMap >::type map(mapSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_names(map));
    return rcpp_result_gen;
END_RCPP
}
// ac_get_ag_coords
arma::mat ac_get_ag_coords(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_get_ag_coords(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_get_ag_coords(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_get_sr_coords
arma::mat ac_get_sr_coords(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_get_sr_coords(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_get_sr_coords(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_set_ag_coords
AcOptimization ac_set_ag_coords(AcOptimization opt, const arma::mat coords);
RcppExport SEXP _Racmacs_ac_set_ag_coords(SEXP optSEXP, SEXP coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type coords(coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_set_ag_coords(opt, coords));
    return rcpp_result_gen;
END_RCPP
}
// ac_set_sr_coords
AcOptimization ac_set_sr_coords(AcOptimization opt, const arma::mat coords);
RcppExport SEXP _Racmacs_ac_set_sr_coords(SEXP optSEXP, SEXP coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type coords(coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_set_sr_coords(opt, coords));
    return rcpp_result_gen;
END_RCPP
}
// ac_align_optimization
AcOptimization ac_align_optimization(AcOptimization source_optimization, const AcOptimization target_optimization);
RcppExport SEXP _Racmacs_ac_align_optimization(SEXP source_optimizationSEXP, SEXP target_optimizationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type source_optimization(source_optimizationSEXP);
    Rcpp::traits::input_parameter< const AcOptimization >::type target_optimization(target_optimizationSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_align_optimization(source_optimization, target_optimization));
    return rcpp_result_gen;
END_RCPP
}
// ac_align_map
AcMap ac_align_map(AcMap source_map, AcMap target_map, bool translation, bool scaling);
RcppExport SEXP _Racmacs_ac_align_map(SEXP source_mapSEXP, SEXP target_mapSEXP, SEXP translationSEXP, SEXP scalingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcMap >::type source_map(source_mapSEXP);
    Rcpp::traits::input_parameter< AcMap >::type target_map(target_mapSEXP);
    Rcpp::traits::input_parameter< bool >::type translation(translationSEXP);
    Rcpp::traits::input_parameter< bool >::type scaling(scalingSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_align_map(source_map, target_map, translation, scaling));
    return rcpp_result_gen;
END_RCPP
}
// ac_align_optimizations
std::vector<AcOptimization> ac_align_optimizations(std::vector<AcOptimization> optimizations);
RcppExport SEXP _Racmacs_ac_align_optimizations(SEXP optimizationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcOptimization> >::type optimizations(optimizationsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_align_optimizations(optimizations));
    return rcpp_result_gen;
END_RCPP
}
// ac_subset_map
AcMap ac_subset_map(AcMap map, const arma::uvec ags, const arma::uvec sr);
RcppExport SEXP _Racmacs_ac_subset_map(SEXP mapSEXP, SEXP agsSEXP, SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcMap >::type map(mapSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type ags(agsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_subset_map(map, ags, sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_table_colbases
arma::vec ac_table_colbases(const AcTiterTable titer_table, const std::string min_col_basis, const arma::vec fixed_col_bases);
RcppExport SEXP _Racmacs_ac_table_colbases(SEXP titer_tableSEXP, SEXP min_col_basisSEXP, SEXP fixed_col_basesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcTiterTable >::type titer_table(titer_tableSEXP);
    Rcpp::traits::input_parameter< const std::string >::type min_col_basis(min_col_basisSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type fixed_col_bases(fixed_col_basesSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_table_colbases(titer_table, min_col_basis, fixed_col_bases));
    return rcpp_result_gen;
END_RCPP
}
// ac_table_distances
arma::mat ac_table_distances(const AcTiterTable titer_table, const arma::vec colbases);
RcppExport SEXP _Racmacs_ac_table_distances(SEXP titer_tableSEXP, SEXP colbasesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcTiterTable >::type titer_table(titer_tableSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type colbases(colbasesSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_table_distances(titer_table, colbases));
    return rcpp_result_gen;
END_RCPP
}
// ac_newOptimization
AcOptimization ac_newOptimization(int dimensions, int num_antigens, int num_sera);
RcppExport SEXP _Racmacs_ac_newOptimization(SEXP dimensionsSEXP, SEXP num_antigensSEXP, SEXP num_seraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< int >::type num_antigens(num_antigensSEXP);
    Rcpp::traits::input_parameter< int >::type num_sera(num_seraSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_newOptimization(dimensions, num_antigens, num_sera));
    return rcpp_result_gen;
END_RCPP
}
// ac_relaxOptimization
AcOptimization ac_relaxOptimization(AcOptimization opt, AcTiterTable titers, AcOptimizerOptions options);
RcppExport SEXP _Racmacs_ac_relaxOptimization(SEXP optSEXP, SEXP titersSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< AcTiterTable >::type titers(titersSEXP);
    Rcpp::traits::input_parameter< AcOptimizerOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_relaxOptimization(opt, titers, options));
    return rcpp_result_gen;
END_RCPP
}
// ac_optimize_map
AcMap ac_optimize_map(AcMap map, int num_dims, int num_optimizations, std::string min_col_basis, arma::vec fixed_col_bases, AcOptimizerOptions options);
RcppExport SEXP _Racmacs_ac_optimize_map(SEXP mapSEXP, SEXP num_dimsSEXP, SEXP num_optimizationsSEXP, SEXP min_col_basisSEXP, SEXP fixed_col_basesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcMap >::type map(mapSEXP);
    Rcpp::traits::input_parameter< int >::type num_dims(num_dimsSEXP);
    Rcpp::traits::input_parameter< int >::type num_optimizations(num_optimizationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type min_col_basis(min_col_basisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fixed_col_bases(fixed_col_basesSEXP);
    Rcpp::traits::input_parameter< AcOptimizerOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_optimize_map(map, num_dims, num_optimizations, min_col_basis, fixed_col_bases, options));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_id
std::string ac_ag_get_id(const AcAntigen& ag);
RcppExport SEXP _Racmacs_ac_ag_get_id(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen& >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_id(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_date
std::string ac_ag_get_date(const AcAntigen& ag);
RcppExport SEXP _Racmacs_ac_ag_get_date(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen& >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_date(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_reference
bool ac_ag_get_reference(const AcAntigen& ag);
RcppExport SEXP _Racmacs_ac_ag_get_reference(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen& >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_reference(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_name
std::string ac_ag_get_name(const AcAntigen& ag);
RcppExport SEXP _Racmacs_ac_ag_get_name(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen& >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_name(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_name_full
std::string ac_ag_get_name_full(const AcAntigen& ag);
RcppExport SEXP _Racmacs_ac_ag_get_name_full(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen& >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_name_full(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_name_abbreviated
std::string ac_ag_get_name_abbreviated(const AcAntigen& ag);
RcppExport SEXP _Racmacs_ac_ag_get_name_abbreviated(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen& >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_name_abbreviated(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_group
int ac_ag_get_group(const AcAntigen& ag);
RcppExport SEXP _Racmacs_ac_ag_get_group(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen& >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_group(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_group_levels
std::vector<std::string> ac_ag_get_group_levels(const AcMap map);
RcppExport SEXP _Racmacs_ac_ag_get_group_levels(SEXP mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcMap >::type map(mapSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_group_levels(map));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_id
AcAntigen ac_ag_set_id(AcAntigen ag, std::string value);
RcppExport SEXP _Racmacs_ac_ag_set_id(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_id(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_date
AcAntigen ac_ag_set_date(AcAntigen ag, std::string value);
RcppExport SEXP _Racmacs_ac_ag_set_date(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_date(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_reference
AcAntigen ac_ag_set_reference(AcAntigen ag, bool value);
RcppExport SEXP _Racmacs_ac_ag_set_reference(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_reference(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_name
AcAntigen ac_ag_set_name(AcAntigen ag, std::string value);
RcppExport SEXP _Racmacs_ac_ag_set_name(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_name(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_name_full
AcAntigen ac_ag_set_name_full(AcAntigen ag, std::string value);
RcppExport SEXP _Racmacs_ac_ag_set_name_full(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_name_full(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_name_abbreviated
AcAntigen ac_ag_set_name_abbreviated(AcAntigen ag, std::string value);
RcppExport SEXP _Racmacs_ac_ag_set_name_abbreviated(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_name_abbreviated(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_group
AcAntigen ac_ag_set_group(AcAntigen ag, int value);
RcppExport SEXP _Racmacs_ac_ag_set_group(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_group(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_group_levels
AcMap ac_ag_set_group_levels(AcMap map, std::vector<std::string> values);
RcppExport SEXP _Racmacs_ac_ag_set_group_levels(SEXP mapSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcMap >::type map(mapSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_group_levels(map, values));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_get_ag_base_coords
arma::mat ac_opt_get_ag_base_coords(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_opt_get_ag_base_coords(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_get_ag_base_coords(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_get_sr_base_coords
arma::mat ac_opt_get_sr_base_coords(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_opt_get_sr_base_coords(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_get_sr_base_coords(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_get_transformation
arma::mat ac_opt_get_transformation(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_opt_get_transformation(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_get_transformation(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_get_translation
arma::mat ac_opt_get_translation(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_opt_get_translation(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_get_translation(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_get_mincolbasis
std::string ac_opt_get_mincolbasis(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_opt_get_mincolbasis(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_get_mincolbasis(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_get_fixedcolbases
arma::vec ac_opt_get_fixedcolbases(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_opt_get_fixedcolbases(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_get_fixedcolbases(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_get_stress
double ac_opt_get_stress(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_opt_get_stress(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_get_stress(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_get_dimensions
int ac_opt_get_dimensions(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_opt_get_dimensions(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_get_dimensions(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_get_comment
std::string ac_opt_get_comment(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_opt_get_comment(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_get_comment(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_set_ag_base_coords
AcOptimization ac_opt_set_ag_base_coords(AcOptimization opt, arma::mat value);
RcppExport SEXP _Racmacs_ac_opt_set_ag_base_coords(SEXP optSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_set_ag_base_coords(opt, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_set_sr_base_coords
AcOptimization ac_opt_set_sr_base_coords(AcOptimization opt, arma::mat value);
RcppExport SEXP _Racmacs_ac_opt_set_sr_base_coords(SEXP optSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_set_sr_base_coords(opt, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_set_transformation
AcOptimization ac_opt_set_transformation(AcOptimization opt, arma::mat value);
RcppExport SEXP _Racmacs_ac_opt_set_transformation(SEXP optSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_set_transformation(opt, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_set_translation
AcOptimization ac_opt_set_translation(AcOptimization opt, arma::mat value);
RcppExport SEXP _Racmacs_ac_opt_set_translation(SEXP optSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_set_translation(opt, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_set_mincolbasis
AcOptimization ac_opt_set_mincolbasis(AcOptimization opt, std::string value);
RcppExport SEXP _Racmacs_ac_opt_set_mincolbasis(SEXP optSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_set_mincolbasis(opt, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_set_fixedcolbases
AcOptimization ac_opt_set_fixedcolbases(AcOptimization opt, arma::vec value);
RcppExport SEXP _Racmacs_ac_opt_set_fixedcolbases(SEXP optSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_set_fixedcolbases(opt, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_set_stress
AcOptimization ac_opt_set_stress(AcOptimization opt, double value);
RcppExport SEXP _Racmacs_ac_opt_set_stress(SEXP optSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_set_stress(opt, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_opt_set_comment
AcOptimization ac_opt_set_comment(AcOptimization opt, std::string value);
RcppExport SEXP _Racmacs_ac_opt_set_comment(SEXP optSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_opt_set_comment(opt, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_rotate_optimization
AcOptimization ac_rotate_optimization(AcOptimization opt, double degrees, int axis_num);
RcppExport SEXP _Racmacs_ac_rotate_optimization(SEXP optSEXP, SEXP degreesSEXP, SEXP axis_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< double >::type degrees(degreesSEXP);
    Rcpp::traits::input_parameter< int >::type axis_num(axis_numSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_rotate_optimization(opt, degrees, axis_num));
    return rcpp_result_gen;
END_RCPP
}
// ac_reflect_optimization
AcOptimization ac_reflect_optimization(AcOptimization opt, int axis_num);
RcppExport SEXP _Racmacs_ac_reflect_optimization(SEXP optSEXP, SEXP axis_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< int >::type axis_num(axis_numSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_reflect_optimization(opt, axis_num));
    return rcpp_result_gen;
END_RCPP
}
// ac_translate_optimization
AcOptimization ac_translate_optimization(AcOptimization opt, arma::mat translation);
RcppExport SEXP _Racmacs_ac_translate_optimization(SEXP optSEXP, SEXP translationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type translation(translationSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_translate_optimization(opt, translation));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_shown
bool ac_ag_get_shown(const AcAntigen ag);
RcppExport SEXP _Racmacs_ac_ag_get_shown(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_shown(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_size
double ac_ag_get_size(const AcAntigen ag);
RcppExport SEXP _Racmacs_ac_ag_get_size(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_size(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_fill
std::string ac_ag_get_fill(const AcAntigen ag);
RcppExport SEXP _Racmacs_ac_ag_get_fill(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_fill(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_outline
std::string ac_ag_get_outline(const AcAntigen ag);
RcppExport SEXP _Racmacs_ac_ag_get_outline(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_outline(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_outline_width
double ac_ag_get_outline_width(const AcAntigen ag);
RcppExport SEXP _Racmacs_ac_ag_get_outline_width(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_outline_width(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_rotation
double ac_ag_get_rotation(const AcAntigen ag);
RcppExport SEXP _Racmacs_ac_ag_get_rotation(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_rotation(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_aspect
double ac_ag_get_aspect(const AcAntigen ag);
RcppExport SEXP _Racmacs_ac_ag_get_aspect(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_aspect(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_get_shape
std::string ac_ag_get_shape(const AcAntigen ag);
RcppExport SEXP _Racmacs_ac_ag_get_shape(SEXP agSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcAntigen >::type ag(agSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_get_shape(ag));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_shown
bool ac_sr_get_shown(const AcSerum sr);
RcppExport SEXP _Racmacs_ac_sr_get_shown(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_shown(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_size
double ac_sr_get_size(const AcSerum sr);
RcppExport SEXP _Racmacs_ac_sr_get_size(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_size(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_fill
std::string ac_sr_get_fill(const AcSerum sr);
RcppExport SEXP _Racmacs_ac_sr_get_fill(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_fill(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_outline
std::string ac_sr_get_outline(const AcSerum sr);
RcppExport SEXP _Racmacs_ac_sr_get_outline(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_outline(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_outline_width
double ac_sr_get_outline_width(const AcSerum sr);
RcppExport SEXP _Racmacs_ac_sr_get_outline_width(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_outline_width(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_rotation
double ac_sr_get_rotation(const AcSerum sr);
RcppExport SEXP _Racmacs_ac_sr_get_rotation(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_rotation(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_aspect
double ac_sr_get_aspect(const AcSerum sr);
RcppExport SEXP _Racmacs_ac_sr_get_aspect(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_aspect(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_shape
std::string ac_sr_get_shape(const AcSerum sr);
RcppExport SEXP _Racmacs_ac_sr_get_shape(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_shape(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_shown
AcAntigen ac_ag_set_shown(AcAntigen ag, bool value);
RcppExport SEXP _Racmacs_ac_ag_set_shown(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_shown(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_size
AcAntigen ac_ag_set_size(AcAntigen ag, double value);
RcppExport SEXP _Racmacs_ac_ag_set_size(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_size(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_fill
AcAntigen ac_ag_set_fill(AcAntigen ag, std::string value);
RcppExport SEXP _Racmacs_ac_ag_set_fill(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_fill(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_outline
AcAntigen ac_ag_set_outline(AcAntigen ag, std::string value);
RcppExport SEXP _Racmacs_ac_ag_set_outline(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_outline(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_outline_width
AcAntigen ac_ag_set_outline_width(AcAntigen ag, double value);
RcppExport SEXP _Racmacs_ac_ag_set_outline_width(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_outline_width(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_rotation
AcAntigen ac_ag_set_rotation(AcAntigen ag, double value);
RcppExport SEXP _Racmacs_ac_ag_set_rotation(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_rotation(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_aspect
AcAntigen ac_ag_set_aspect(AcAntigen ag, double value);
RcppExport SEXP _Racmacs_ac_ag_set_aspect(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_aspect(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_ag_set_shape
AcAntigen ac_ag_set_shape(AcAntigen ag, std::string value);
RcppExport SEXP _Racmacs_ac_ag_set_shape(SEXP agSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcAntigen >::type ag(agSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_set_shape(ag, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_shown
AcSerum ac_sr_set_shown(AcSerum sr, bool value);
RcppExport SEXP _Racmacs_ac_sr_set_shown(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_shown(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_size
AcSerum ac_sr_set_size(AcSerum sr, double value);
RcppExport SEXP _Racmacs_ac_sr_set_size(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_size(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_fill
AcSerum ac_sr_set_fill(AcSerum sr, std::string value);
RcppExport SEXP _Racmacs_ac_sr_set_fill(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_fill(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_outline
AcSerum ac_sr_set_outline(AcSerum sr, std::string value);
RcppExport SEXP _Racmacs_ac_sr_set_outline(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_outline(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_outline_width
AcSerum ac_sr_set_outline_width(AcSerum sr, double value);
RcppExport SEXP _Racmacs_ac_sr_set_outline_width(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_outline_width(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_rotation
AcSerum ac_sr_set_rotation(AcSerum sr, double value);
RcppExport SEXP _Racmacs_ac_sr_set_rotation(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_rotation(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_aspect
AcSerum ac_sr_set_aspect(AcSerum sr, double value);
RcppExport SEXP _Racmacs_ac_sr_set_aspect(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_aspect(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_shape
AcSerum ac_sr_set_shape(AcSerum sr, std::string value);
RcppExport SEXP _Racmacs_ac_sr_set_shape(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_shape(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_id
std::string ac_sr_get_id(const AcSerum& sr);
RcppExport SEXP _Racmacs_ac_sr_get_id(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum& >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_id(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_date
std::string ac_sr_get_date(const AcSerum& sr);
RcppExport SEXP _Racmacs_ac_sr_get_date(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum& >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_date(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_reference
bool ac_sr_get_reference(const AcSerum& sr);
RcppExport SEXP _Racmacs_ac_sr_get_reference(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum& >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_reference(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_name
std::string ac_sr_get_name(const AcSerum& sr);
RcppExport SEXP _Racmacs_ac_sr_get_name(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum& >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_name(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_name_full
std::string ac_sr_get_name_full(const AcSerum& sr);
RcppExport SEXP _Racmacs_ac_sr_get_name_full(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum& >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_name_full(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_name_abbreviated
std::string ac_sr_get_name_abbreviated(const AcSerum& sr);
RcppExport SEXP _Racmacs_ac_sr_get_name_abbreviated(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum& >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_name_abbreviated(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_group
int ac_sr_get_group(const AcSerum& sr);
RcppExport SEXP _Racmacs_ac_sr_get_group(SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcSerum& >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_group(sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_get_group_levels
std::vector<std::string> ac_sr_get_group_levels(const AcMap map);
RcppExport SEXP _Racmacs_ac_sr_get_group_levels(SEXP mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const AcMap >::type map(mapSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_get_group_levels(map));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_id
AcSerum ac_sr_set_id(AcSerum sr, std::string value);
RcppExport SEXP _Racmacs_ac_sr_set_id(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_id(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_date
AcSerum ac_sr_set_date(AcSerum sr, std::string value);
RcppExport SEXP _Racmacs_ac_sr_set_date(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_date(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_reference
AcSerum ac_sr_set_reference(AcSerum sr, bool value);
RcppExport SEXP _Racmacs_ac_sr_set_reference(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_reference(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_name
AcSerum ac_sr_set_name(AcSerum sr, std::string value);
RcppExport SEXP _Racmacs_ac_sr_set_name(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_name(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_name_full
AcSerum ac_sr_set_name_full(AcSerum sr, std::string value);
RcppExport SEXP _Racmacs_ac_sr_set_name_full(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_name_full(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_name_abbreviated
AcSerum ac_sr_set_name_abbreviated(AcSerum sr, std::string value);
RcppExport SEXP _Racmacs_ac_sr_set_name_abbreviated(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_name_abbreviated(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_group
AcSerum ac_sr_set_group(AcSerum sr, int value);
RcppExport SEXP _Racmacs_ac_sr_set_group(SEXP srSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcSerum >::type sr(srSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_group(sr, value));
    return rcpp_result_gen;
END_RCPP
}
// ac_sr_set_group_levels
AcMap ac_sr_set_group_levels(AcMap map, std::vector<std::string> values);
RcppExport SEXP _Racmacs_ac_sr_set_group_levels(SEXP mapSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< AcMap >::type map(mapSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_sr_set_group_levels(map, values));
    return rcpp_result_gen;
END_RCPP
}
// ac_dimension_test_map
DimTestOutput ac_dimension_test_map(AcTiterTable titer_table, arma::uvec dimensions_to_test, double test_proportion, std::string minimum_column_basis, arma::vec fixed_column_bases, int num_optimizations, AcOptimizerOptions options);
RcppExport SEXP _Racmacs_ac_dimension_test_map(SEXP titer_tableSEXP, SEXP dimensions_to_testSEXP, SEXP test_proportionSEXP, SEXP minimum_column_basisSEXP, SEXP fixed_column_basesSEXP, SEXP num_optimizationsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcTiterTable >::type titer_table(titer_tableSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type dimensions_to_test(dimensions_to_testSEXP);
    Rcpp::traits::input_parameter< double >::type test_proportion(test_proportionSEXP);
    Rcpp::traits::input_parameter< std::string >::type minimum_column_basis(minimum_column_basisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fixed_column_bases(fixed_column_basesSEXP);
    Rcpp::traits::input_parameter< int >::type num_optimizations(num_optimizationsSEXP);
    Rcpp::traits::input_parameter< AcOptimizerOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_dimension_test_map(titer_table, dimensions_to_test, test_proportion, minimum_column_basis, fixed_column_bases, num_optimizations, options));
    return rcpp_result_gen;
END_RCPP
}
// ac_match_map_ags
arma::ivec ac_match_map_ags(AcMap const& map1, AcMap const& map2);
RcppExport SEXP _Racmacs_ac_match_map_ags(SEXP map1SEXP, SEXP map2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcMap const& >::type map1(map1SEXP);
    Rcpp::traits::input_parameter< AcMap const& >::type map2(map2SEXP);
    rcpp_result_gen = Rcpp::wrap(ac_match_map_ags(map1, map2));
    return rcpp_result_gen;
END_RCPP
}
// ac_match_map_sr
arma::ivec ac_match_map_sr(AcMap const& map1, AcMap const& map2);
RcppExport SEXP _Racmacs_ac_match_map_sr(SEXP map1SEXP, SEXP map2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcMap const& >::type map1(map1SEXP);
    Rcpp::traits::input_parameter< AcMap const& >::type map2(map2SEXP);
    rcpp_result_gen = Rcpp::wrap(ac_match_map_sr(map1, map2));
    return rcpp_result_gen;
END_RCPP
}
// ac_merge_titer_layers
AcTiterTable ac_merge_titer_layers(const std::vector<AcTiterTable>& titer_layers);
RcppExport SEXP _Racmacs_ac_merge_titer_layers(SEXP titer_layersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<AcTiterTable>& >::type titer_layers(titer_layersSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_merge_titer_layers(titer_layers));
    return rcpp_result_gen;
END_RCPP
}
// ac_merge_tables
AcMap ac_merge_tables(std::vector<AcMap> maps);
RcppExport SEXP _Racmacs_ac_merge_tables(SEXP mapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcMap> >::type maps(mapsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_merge_tables(maps));
    return rcpp_result_gen;
END_RCPP
}
// ac_merge_reoptimized
AcMap ac_merge_reoptimized(std::vector<AcMap> maps, int num_dims, int num_optimizations, AcOptimizerOptions options);
RcppExport SEXP _Racmacs_ac_merge_reoptimized(SEXP mapsSEXP, SEXP num_dimsSEXP, SEXP num_optimizationsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcMap> >::type maps(mapsSEXP);
    Rcpp::traits::input_parameter< int >::type num_dims(num_dimsSEXP);
    Rcpp::traits::input_parameter< int >::type num_optimizations(num_optimizationsSEXP);
    Rcpp::traits::input_parameter< AcOptimizerOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_merge_reoptimized(maps, num_dims, num_optimizations, options));
    return rcpp_result_gen;
END_RCPP
}
// ac_merge_frozen_overlay
AcMap ac_merge_frozen_overlay(std::vector<AcMap> maps);
RcppExport SEXP _Racmacs_ac_merge_frozen_overlay(SEXP mapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcMap> >::type maps(mapsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_merge_frozen_overlay(maps));
    return rcpp_result_gen;
END_RCPP
}
// ac_merge_relaxed_overlay
AcMap ac_merge_relaxed_overlay(std::vector<AcMap> maps, AcOptimizerOptions options);
RcppExport SEXP _Racmacs_ac_merge_relaxed_overlay(SEXP mapsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcMap> >::type maps(mapsSEXP);
    Rcpp::traits::input_parameter< AcOptimizerOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_merge_relaxed_overlay(maps, options));
    return rcpp_result_gen;
END_RCPP
}
// ac_merge_incremental
AcMap ac_merge_incremental(const std::vector<AcMap>& maps, int num_dims, int num_optimizations, std::string min_colbasis, AcOptimizerOptions options);
RcppExport SEXP _Racmacs_ac_merge_incremental(SEXP mapsSEXP, SEXP num_dimsSEXP, SEXP num_optimizationsSEXP, SEXP min_colbasisSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<AcMap>& >::type maps(mapsSEXP);
    Rcpp::traits::input_parameter< int >::type num_dims(num_dimsSEXP);
    Rcpp::traits::input_parameter< int >::type num_optimizations(num_optimizationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type min_colbasis(min_colbasisSEXP);
    Rcpp::traits::input_parameter< AcOptimizerOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_merge_incremental(maps, num_dims, num_optimizations, min_colbasis, options));
    return rcpp_result_gen;
END_RCPP
}
// ac_merge_titers
AcTiter ac_merge_titers(const std::vector<AcTiter>& titers, double sd_lim);
RcppExport SEXP _Racmacs_ac_merge_titers(SEXP titersSEXP, SEXP sd_limSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<AcTiter>& >::type titers(titersSEXP);
    Rcpp::traits::input_parameter< double >::type sd_lim(sd_limSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_merge_titers(titers, sd_lim));
    return rcpp_result_gen;
END_RCPP
}
// ac_move_trapped_points
AcOptimization ac_move_trapped_points(AcOptimization optimization, arma::mat tabledists, arma::umat titertypes, double grid_spacing, AcOptimizerOptions options, int max_iterations);
RcppExport SEXP _Racmacs_ac_move_trapped_points(SEXP optimizationSEXP, SEXP tabledistsSEXP, SEXP titertypesSEXP, SEXP grid_spacingSEXP, SEXP optionsSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type optimization(optimizationSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tabledists(tabledistsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type titertypes(titertypesSEXP);
    Rcpp::traits::input_parameter< double >::type grid_spacing(grid_spacingSEXP);
    Rcpp::traits::input_parameter< AcOptimizerOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_move_trapped_points(optimization, tabledists, titertypes, grid_spacing, options, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// ac_noisy_bootstrap_map
NoisyBootstrapOutput ac_noisy_bootstrap_map(AcTiterTable titer_table, double ag_noise_sd, double titer_noise_sd, std::string minimum_column_basis, arma::vec fixed_column_bases, int num_optimizations, int num_dimensions, AcOptimizerOptions options);
RcppExport SEXP _Racmacs_ac_noisy_bootstrap_map(SEXP titer_tableSEXP, SEXP ag_noise_sdSEXP, SEXP titer_noise_sdSEXP, SEXP minimum_column_basisSEXP, SEXP fixed_column_basesSEXP, SEXP num_optimizationsSEXP, SEXP num_dimensionsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcTiterTable >::type titer_table(titer_tableSEXP);
    Rcpp::traits::input_parameter< double >::type ag_noise_sd(ag_noise_sdSEXP);
    Rcpp::traits::input_parameter< double >::type titer_noise_sd(titer_noise_sdSEXP);
    Rcpp::traits::input_parameter< std::string >::type minimum_column_basis(minimum_column_basisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fixed_column_bases(fixed_column_basesSEXP);
    Rcpp::traits::input_parameter< int >::type num_optimizations(num_optimizationsSEXP);
    Rcpp::traits::input_parameter< int >::type num_dimensions(num_dimensionsSEXP);
    Rcpp::traits::input_parameter< AcOptimizerOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_noisy_bootstrap_map(titer_table, ag_noise_sd, titer_noise_sd, minimum_column_basis, fixed_column_bases, num_optimizations, num_dimensions, options));
    return rcpp_result_gen;
END_RCPP
}
// ac_coords_stress
double ac_coords_stress(const arma::mat& tabledist_matrix, const arma::umat& titertype_matrix, arma::mat& ag_coords, arma::mat& sr_coords);
RcppExport SEXP _Racmacs_ac_coords_stress(SEXP tabledist_matrixSEXP, SEXP titertype_matrixSEXP, SEXP ag_coordsSEXP, SEXP sr_coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type tabledist_matrix(tabledist_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type titertype_matrix(titertype_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ag_coords(ag_coordsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sr_coords(sr_coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_coords_stress(tabledist_matrix, titertype_matrix, ag_coords, sr_coords));
    return rcpp_result_gen;
END_RCPP
}
// ac_relax_coords
double ac_relax_coords(const arma::mat& tabledist_matrix, const arma::umat& titertype_matrix, arma::mat& ag_coords, arma::mat& sr_coords, const AcOptimizerOptions& options);
RcppExport SEXP _Racmacs_ac_relax_coords(SEXP tabledist_matrixSEXP, SEXP titertype_matrixSEXP, SEXP ag_coordsSEXP, SEXP sr_coordsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type tabledist_matrix(tabledist_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type titertype_matrix(titertype_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ag_coords(ag_coordsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sr_coords(sr_coordsSEXP);
    Rcpp::traits::input_parameter< const AcOptimizerOptions& >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_relax_coords(tabledist_matrix, titertype_matrix, ag_coords, sr_coords, options));
    return rcpp_result_gen;
END_RCPP
}
// ac_runOptimizations
std::vector<AcOptimization> ac_runOptimizations(const AcTiterTable& titertable, const arma::vec& colbases, const int& num_dims, const int& num_optimizations, const AcOptimizerOptions& options);
RcppExport SEXP _Racmacs_ac_runOptimizations(SEXP titertableSEXP, SEXP colbasesSEXP, SEXP num_dimsSEXP, SEXP num_optimizationsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcTiterTable& >::type titertable(titertableSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type colbases(colbasesSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_dims(num_dimsSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_optimizations(num_optimizationsSEXP);
    Rcpp::traits::input_parameter< const AcOptimizerOptions& >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_runOptimizations(titertable, colbases, num_dims, num_optimizations, options));
    return rcpp_result_gen;
END_RCPP
}
// ac_stress_blob_grid
StressBlobGrid ac_stress_blob_grid(arma::vec testcoords, arma::mat coords, arma::vec tabledists, arma::uvec titertypes, double stress_lim, double grid_spacing);
RcppExport SEXP _Racmacs_ac_stress_blob_grid(SEXP testcoordsSEXP, SEXP coordsSEXP, SEXP tabledistsSEXP, SEXP titertypesSEXP, SEXP stress_limSEXP, SEXP grid_spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type testcoords(testcoordsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tabledists(tabledistsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type titertypes(titertypesSEXP);
    Rcpp::traits::input_parameter< double >::type stress_lim(stress_limSEXP);
    Rcpp::traits::input_parameter< double >::type grid_spacing(grid_spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_stress_blob_grid(testcoords, coords, tabledists, titertypes, stress_lim, grid_spacing));
    return rcpp_result_gen;
END_RCPP
}
// numeric_titers
arma::vec numeric_titers(std::vector<AcTiter> titers);
RcppExport SEXP _Racmacs_numeric_titers(SEXP titersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcTiter> >::type titers(titersSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_titers(titers));
    return rcpp_result_gen;
END_RCPP
}
// log_titers
arma::vec log_titers(std::vector<AcTiter> titers);
RcppExport SEXP _Racmacs_log_titers(SEXP titersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcTiter> >::type titers(titersSEXP);
    rcpp_result_gen = Rcpp::wrap(log_titers(titers));
    return rcpp_result_gen;
END_RCPP
}
// titer_types_int
arma::uvec titer_types_int(std::vector<AcTiter> titers);
RcppExport SEXP _Racmacs_titer_types_int(SEXP titersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcTiter> >::type titers(titersSEXP);
    rcpp_result_gen = Rcpp::wrap(titer_types_int(titers));
    return rcpp_result_gen;
END_RCPP
}
// reduce_matrix_dimensions
arma::mat reduce_matrix_dimensions(arma::mat m, int dim);
RcppExport SEXP _Racmacs_reduce_matrix_dimensions(SEXP mSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_matrix_dimensions(m, dim));
    return rcpp_result_gen;
END_RCPP
}
// json_to_acmap
AcMap json_to_acmap(std::string json);
RcppExport SEXP _Racmacs_json_to_acmap(SEXP jsonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json(jsonSEXP);
    rcpp_result_gen = Rcpp::wrap(json_to_acmap(json));
    return rcpp_result_gen;
END_RCPP
}
// acmap_to_json
std::string acmap_to_json(AcMap map, std::string version);
RcppExport SEXP _Racmacs_acmap_to_json(SEXP mapSEXP, SEXP versionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcMap >::type map(mapSEXP);
    Rcpp::traits::input_parameter< std::string >::type version(versionSEXP);
    rcpp_result_gen = Rcpp::wrap(acmap_to_json(map, version));
    return rcpp_result_gen;
END_RCPP
}
// ac_procrustes
Procrustes ac_procrustes(arma::mat X, arma::mat Xstar, bool translation, bool dilation);
RcppExport SEXP _Racmacs_ac_procrustes(SEXP XSEXP, SEXP XstarSEXP, SEXP translationSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xstar(XstarSEXP);
    Rcpp::traits::input_parameter< bool >::type translation(translationSEXP);
    Rcpp::traits::input_parameter< bool >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_procrustes(X, Xstar, translation, dilation));
    return rcpp_result_gen;
END_RCPP
}
// ac_align_coords
arma::mat ac_align_coords(arma::mat source, arma::mat target, bool translation, bool dilation);
RcppExport SEXP _Racmacs_ac_align_coords(SEXP sourceSEXP, SEXP targetSEXP, SEXP translationSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type target(targetSEXP);
    Rcpp::traits::input_parameter< bool >::type translation(translationSEXP);
    Rcpp::traits::input_parameter< bool >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_align_coords(source, target, translation, dilation));
    return rcpp_result_gen;
END_RCPP
}
// ac_procrustes_map_coords
AcCoords ac_procrustes_map_coords(const AcMap& base_map, AcMap procrustes_map, int base_map_optimization_number, int procrustes_map_optimization_number, bool translation, bool scaling);
RcppExport SEXP _Racmacs_ac_procrustes_map_coords(SEXP base_mapSEXP, SEXP procrustes_mapSEXP, SEXP base_map_optimization_numberSEXP, SEXP procrustes_map_optimization_numberSEXP, SEXP translationSEXP, SEXP scalingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcMap& >::type base_map(base_mapSEXP);
    Rcpp::traits::input_parameter< AcMap >::type procrustes_map(procrustes_mapSEXP);
    Rcpp::traits::input_parameter< int >::type base_map_optimization_number(base_map_optimization_numberSEXP);
    Rcpp::traits::input_parameter< int >::type procrustes_map_optimization_number(procrustes_map_optimization_numberSEXP);
    Rcpp::traits::input_parameter< bool >::type translation(translationSEXP);
    Rcpp::traits::input_parameter< bool >::type scaling(scalingSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_procrustes_map_coords(base_map, procrustes_map, base_map_optimization_number, procrustes_map_optimization_number, translation, scaling));
    return rcpp_result_gen;
END_RCPP
}
// ac_procrustes_map_data
ProcrustesData ac_procrustes_map_data(const AcOptimization& optimization, AcCoords pc_coords);
RcppExport SEXP _Racmacs_ac_procrustes_map_data(SEXP optimizationSEXP, SEXP pc_coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcOptimization& >::type optimization(optimizationSEXP);
    Rcpp::traits::input_parameter< AcCoords >::type pc_coords(pc_coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_procrustes_map_data(optimization, pc_coords));
    return rcpp_result_gen;
END_RCPP
}
// ac_coord_dists
arma::vec ac_coord_dists(arma::mat coords1, arma::mat coords2);
RcppExport SEXP _Racmacs_ac_coord_dists(SEXP coords1SEXP, SEXP coords2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type coords1(coords1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coords2(coords2SEXP);
    rcpp_result_gen = Rcpp::wrap(ac_coord_dists(coords1, coords2));
    return rcpp_result_gen;
END_RCPP
}
// ac_coordDistMatrix
arma::mat ac_coordDistMatrix(arma::mat coords1, arma::mat coords2);
RcppExport SEXP _Racmacs_ac_coordDistMatrix(SEXP coords1SEXP, SEXP coords2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type coords1(coords1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coords2(coords2SEXP);
    rcpp_result_gen = Rcpp::wrap(ac_coordDistMatrix(coords1, coords2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Racmacs_ac_ag_names", (DL_FUNC) &_Racmacs_ac_ag_names, 1},
    {"_Racmacs_ac_get_ag_coords", (DL_FUNC) &_Racmacs_ac_get_ag_coords, 1},
    {"_Racmacs_ac_get_sr_coords", (DL_FUNC) &_Racmacs_ac_get_sr_coords, 1},
    {"_Racmacs_ac_set_ag_coords", (DL_FUNC) &_Racmacs_ac_set_ag_coords, 2},
    {"_Racmacs_ac_set_sr_coords", (DL_FUNC) &_Racmacs_ac_set_sr_coords, 2},
    {"_Racmacs_ac_align_optimization", (DL_FUNC) &_Racmacs_ac_align_optimization, 2},
    {"_Racmacs_ac_align_map", (DL_FUNC) &_Racmacs_ac_align_map, 4},
    {"_Racmacs_ac_align_optimizations", (DL_FUNC) &_Racmacs_ac_align_optimizations, 1},
    {"_Racmacs_ac_subset_map", (DL_FUNC) &_Racmacs_ac_subset_map, 3},
    {"_Racmacs_ac_table_colbases", (DL_FUNC) &_Racmacs_ac_table_colbases, 3},
    {"_Racmacs_ac_table_distances", (DL_FUNC) &_Racmacs_ac_table_distances, 2},
    {"_Racmacs_ac_newOptimization", (DL_FUNC) &_Racmacs_ac_newOptimization, 3},
    {"_Racmacs_ac_relaxOptimization", (DL_FUNC) &_Racmacs_ac_relaxOptimization, 3},
    {"_Racmacs_ac_optimize_map", (DL_FUNC) &_Racmacs_ac_optimize_map, 6},
    {"_Racmacs_ac_ag_get_id", (DL_FUNC) &_Racmacs_ac_ag_get_id, 1},
    {"_Racmacs_ac_ag_get_date", (DL_FUNC) &_Racmacs_ac_ag_get_date, 1},
    {"_Racmacs_ac_ag_get_reference", (DL_FUNC) &_Racmacs_ac_ag_get_reference, 1},
    {"_Racmacs_ac_ag_get_name", (DL_FUNC) &_Racmacs_ac_ag_get_name, 1},
    {"_Racmacs_ac_ag_get_name_full", (DL_FUNC) &_Racmacs_ac_ag_get_name_full, 1},
    {"_Racmacs_ac_ag_get_name_abbreviated", (DL_FUNC) &_Racmacs_ac_ag_get_name_abbreviated, 1},
    {"_Racmacs_ac_ag_get_group", (DL_FUNC) &_Racmacs_ac_ag_get_group, 1},
    {"_Racmacs_ac_ag_get_group_levels", (DL_FUNC) &_Racmacs_ac_ag_get_group_levels, 1},
    {"_Racmacs_ac_ag_set_id", (DL_FUNC) &_Racmacs_ac_ag_set_id, 2},
    {"_Racmacs_ac_ag_set_date", (DL_FUNC) &_Racmacs_ac_ag_set_date, 2},
    {"_Racmacs_ac_ag_set_reference", (DL_FUNC) &_Racmacs_ac_ag_set_reference, 2},
    {"_Racmacs_ac_ag_set_name", (DL_FUNC) &_Racmacs_ac_ag_set_name, 2},
    {"_Racmacs_ac_ag_set_name_full", (DL_FUNC) &_Racmacs_ac_ag_set_name_full, 2},
    {"_Racmacs_ac_ag_set_name_abbreviated", (DL_FUNC) &_Racmacs_ac_ag_set_name_abbreviated, 2},
    {"_Racmacs_ac_ag_set_group", (DL_FUNC) &_Racmacs_ac_ag_set_group, 2},
    {"_Racmacs_ac_ag_set_group_levels", (DL_FUNC) &_Racmacs_ac_ag_set_group_levels, 2},
    {"_Racmacs_ac_opt_get_ag_base_coords", (DL_FUNC) &_Racmacs_ac_opt_get_ag_base_coords, 1},
    {"_Racmacs_ac_opt_get_sr_base_coords", (DL_FUNC) &_Racmacs_ac_opt_get_sr_base_coords, 1},
    {"_Racmacs_ac_opt_get_transformation", (DL_FUNC) &_Racmacs_ac_opt_get_transformation, 1},
    {"_Racmacs_ac_opt_get_translation", (DL_FUNC) &_Racmacs_ac_opt_get_translation, 1},
    {"_Racmacs_ac_opt_get_mincolbasis", (DL_FUNC) &_Racmacs_ac_opt_get_mincolbasis, 1},
    {"_Racmacs_ac_opt_get_fixedcolbases", (DL_FUNC) &_Racmacs_ac_opt_get_fixedcolbases, 1},
    {"_Racmacs_ac_opt_get_stress", (DL_FUNC) &_Racmacs_ac_opt_get_stress, 1},
    {"_Racmacs_ac_opt_get_dimensions", (DL_FUNC) &_Racmacs_ac_opt_get_dimensions, 1},
    {"_Racmacs_ac_opt_get_comment", (DL_FUNC) &_Racmacs_ac_opt_get_comment, 1},
    {"_Racmacs_ac_opt_set_ag_base_coords", (DL_FUNC) &_Racmacs_ac_opt_set_ag_base_coords, 2},
    {"_Racmacs_ac_opt_set_sr_base_coords", (DL_FUNC) &_Racmacs_ac_opt_set_sr_base_coords, 2},
    {"_Racmacs_ac_opt_set_transformation", (DL_FUNC) &_Racmacs_ac_opt_set_transformation, 2},
    {"_Racmacs_ac_opt_set_translation", (DL_FUNC) &_Racmacs_ac_opt_set_translation, 2},
    {"_Racmacs_ac_opt_set_mincolbasis", (DL_FUNC) &_Racmacs_ac_opt_set_mincolbasis, 2},
    {"_Racmacs_ac_opt_set_fixedcolbases", (DL_FUNC) &_Racmacs_ac_opt_set_fixedcolbases, 2},
    {"_Racmacs_ac_opt_set_stress", (DL_FUNC) &_Racmacs_ac_opt_set_stress, 2},
    {"_Racmacs_ac_opt_set_comment", (DL_FUNC) &_Racmacs_ac_opt_set_comment, 2},
    {"_Racmacs_ac_rotate_optimization", (DL_FUNC) &_Racmacs_ac_rotate_optimization, 3},
    {"_Racmacs_ac_reflect_optimization", (DL_FUNC) &_Racmacs_ac_reflect_optimization, 2},
    {"_Racmacs_ac_translate_optimization", (DL_FUNC) &_Racmacs_ac_translate_optimization, 2},
    {"_Racmacs_ac_ag_get_shown", (DL_FUNC) &_Racmacs_ac_ag_get_shown, 1},
    {"_Racmacs_ac_ag_get_size", (DL_FUNC) &_Racmacs_ac_ag_get_size, 1},
    {"_Racmacs_ac_ag_get_fill", (DL_FUNC) &_Racmacs_ac_ag_get_fill, 1},
    {"_Racmacs_ac_ag_get_outline", (DL_FUNC) &_Racmacs_ac_ag_get_outline, 1},
    {"_Racmacs_ac_ag_get_outline_width", (DL_FUNC) &_Racmacs_ac_ag_get_outline_width, 1},
    {"_Racmacs_ac_ag_get_rotation", (DL_FUNC) &_Racmacs_ac_ag_get_rotation, 1},
    {"_Racmacs_ac_ag_get_aspect", (DL_FUNC) &_Racmacs_ac_ag_get_aspect, 1},
    {"_Racmacs_ac_ag_get_shape", (DL_FUNC) &_Racmacs_ac_ag_get_shape, 1},
    {"_Racmacs_ac_sr_get_shown", (DL_FUNC) &_Racmacs_ac_sr_get_shown, 1},
    {"_Racmacs_ac_sr_get_size", (DL_FUNC) &_Racmacs_ac_sr_get_size, 1},
    {"_Racmacs_ac_sr_get_fill", (DL_FUNC) &_Racmacs_ac_sr_get_fill, 1},
    {"_Racmacs_ac_sr_get_outline", (DL_FUNC) &_Racmacs_ac_sr_get_outline, 1},
    {"_Racmacs_ac_sr_get_outline_width", (DL_FUNC) &_Racmacs_ac_sr_get_outline_width, 1},
    {"_Racmacs_ac_sr_get_rotation", (DL_FUNC) &_Racmacs_ac_sr_get_rotation, 1},
    {"_Racmacs_ac_sr_get_aspect", (DL_FUNC) &_Racmacs_ac_sr_get_aspect, 1},
    {"_Racmacs_ac_sr_get_shape", (DL_FUNC) &_Racmacs_ac_sr_get_shape, 1},
    {"_Racmacs_ac_ag_set_shown", (DL_FUNC) &_Racmacs_ac_ag_set_shown, 2},
    {"_Racmacs_ac_ag_set_size", (DL_FUNC) &_Racmacs_ac_ag_set_size, 2},
    {"_Racmacs_ac_ag_set_fill", (DL_FUNC) &_Racmacs_ac_ag_set_fill, 2},
    {"_Racmacs_ac_ag_set_outline", (DL_FUNC) &_Racmacs_ac_ag_set_outline, 2},
    {"_Racmacs_ac_ag_set_outline_width", (DL_FUNC) &_Racmacs_ac_ag_set_outline_width, 2},
    {"_Racmacs_ac_ag_set_rotation", (DL_FUNC) &_Racmacs_ac_ag_set_rotation, 2},
    {"_Racmacs_ac_ag_set_aspect", (DL_FUNC) &_Racmacs_ac_ag_set_aspect, 2},
    {"_Racmacs_ac_ag_set_shape", (DL_FUNC) &_Racmacs_ac_ag_set_shape, 2},
    {"_Racmacs_ac_sr_set_shown", (DL_FUNC) &_Racmacs_ac_sr_set_shown, 2},
    {"_Racmacs_ac_sr_set_size", (DL_FUNC) &_Racmacs_ac_sr_set_size, 2},
    {"_Racmacs_ac_sr_set_fill", (DL_FUNC) &_Racmacs_ac_sr_set_fill, 2},
    {"_Racmacs_ac_sr_set_outline", (DL_FUNC) &_Racmacs_ac_sr_set_outline, 2},
    {"_Racmacs_ac_sr_set_outline_width", (DL_FUNC) &_Racmacs_ac_sr_set_outline_width, 2},
    {"_Racmacs_ac_sr_set_rotation", (DL_FUNC) &_Racmacs_ac_sr_set_rotation, 2},
    {"_Racmacs_ac_sr_set_aspect", (DL_FUNC) &_Racmacs_ac_sr_set_aspect, 2},
    {"_Racmacs_ac_sr_set_shape", (DL_FUNC) &_Racmacs_ac_sr_set_shape, 2},
    {"_Racmacs_ac_sr_get_id", (DL_FUNC) &_Racmacs_ac_sr_get_id, 1},
    {"_Racmacs_ac_sr_get_date", (DL_FUNC) &_Racmacs_ac_sr_get_date, 1},
    {"_Racmacs_ac_sr_get_reference", (DL_FUNC) &_Racmacs_ac_sr_get_reference, 1},
    {"_Racmacs_ac_sr_get_name", (DL_FUNC) &_Racmacs_ac_sr_get_name, 1},
    {"_Racmacs_ac_sr_get_name_full", (DL_FUNC) &_Racmacs_ac_sr_get_name_full, 1},
    {"_Racmacs_ac_sr_get_name_abbreviated", (DL_FUNC) &_Racmacs_ac_sr_get_name_abbreviated, 1},
    {"_Racmacs_ac_sr_get_group", (DL_FUNC) &_Racmacs_ac_sr_get_group, 1},
    {"_Racmacs_ac_sr_get_group_levels", (DL_FUNC) &_Racmacs_ac_sr_get_group_levels, 1},
    {"_Racmacs_ac_sr_set_id", (DL_FUNC) &_Racmacs_ac_sr_set_id, 2},
    {"_Racmacs_ac_sr_set_date", (DL_FUNC) &_Racmacs_ac_sr_set_date, 2},
    {"_Racmacs_ac_sr_set_reference", (DL_FUNC) &_Racmacs_ac_sr_set_reference, 2},
    {"_Racmacs_ac_sr_set_name", (DL_FUNC) &_Racmacs_ac_sr_set_name, 2},
    {"_Racmacs_ac_sr_set_name_full", (DL_FUNC) &_Racmacs_ac_sr_set_name_full, 2},
    {"_Racmacs_ac_sr_set_name_abbreviated", (DL_FUNC) &_Racmacs_ac_sr_set_name_abbreviated, 2},
    {"_Racmacs_ac_sr_set_group", (DL_FUNC) &_Racmacs_ac_sr_set_group, 2},
    {"_Racmacs_ac_sr_set_group_levels", (DL_FUNC) &_Racmacs_ac_sr_set_group_levels, 2},
    {"_Racmacs_ac_dimension_test_map", (DL_FUNC) &_Racmacs_ac_dimension_test_map, 7},
    {"_Racmacs_ac_match_map_ags", (DL_FUNC) &_Racmacs_ac_match_map_ags, 2},
    {"_Racmacs_ac_match_map_sr", (DL_FUNC) &_Racmacs_ac_match_map_sr, 2},
    {"_Racmacs_ac_merge_titer_layers", (DL_FUNC) &_Racmacs_ac_merge_titer_layers, 1},
    {"_Racmacs_ac_merge_tables", (DL_FUNC) &_Racmacs_ac_merge_tables, 1},
    {"_Racmacs_ac_merge_reoptimized", (DL_FUNC) &_Racmacs_ac_merge_reoptimized, 4},
    {"_Racmacs_ac_merge_frozen_overlay", (DL_FUNC) &_Racmacs_ac_merge_frozen_overlay, 1},
    {"_Racmacs_ac_merge_relaxed_overlay", (DL_FUNC) &_Racmacs_ac_merge_relaxed_overlay, 2},
    {"_Racmacs_ac_merge_incremental", (DL_FUNC) &_Racmacs_ac_merge_incremental, 5},
    {"_Racmacs_ac_merge_titers", (DL_FUNC) &_Racmacs_ac_merge_titers, 2},
    {"_Racmacs_ac_move_trapped_points", (DL_FUNC) &_Racmacs_ac_move_trapped_points, 6},
    {"_Racmacs_ac_noisy_bootstrap_map", (DL_FUNC) &_Racmacs_ac_noisy_bootstrap_map, 8},
    {"_Racmacs_ac_coords_stress", (DL_FUNC) &_Racmacs_ac_coords_stress, 4},
    {"_Racmacs_ac_relax_coords", (DL_FUNC) &_Racmacs_ac_relax_coords, 5},
    {"_Racmacs_ac_runOptimizations", (DL_FUNC) &_Racmacs_ac_runOptimizations, 5},
    {"_Racmacs_ac_stress_blob_grid", (DL_FUNC) &_Racmacs_ac_stress_blob_grid, 6},
    {"_Racmacs_numeric_titers", (DL_FUNC) &_Racmacs_numeric_titers, 1},
    {"_Racmacs_log_titers", (DL_FUNC) &_Racmacs_log_titers, 1},
    {"_Racmacs_titer_types_int", (DL_FUNC) &_Racmacs_titer_types_int, 1},
    {"_Racmacs_reduce_matrix_dimensions", (DL_FUNC) &_Racmacs_reduce_matrix_dimensions, 2},
    {"_Racmacs_json_to_acmap", (DL_FUNC) &_Racmacs_json_to_acmap, 1},
    {"_Racmacs_acmap_to_json", (DL_FUNC) &_Racmacs_acmap_to_json, 2},
    {"_Racmacs_ac_procrustes", (DL_FUNC) &_Racmacs_ac_procrustes, 4},
    {"_Racmacs_ac_align_coords", (DL_FUNC) &_Racmacs_ac_align_coords, 4},
    {"_Racmacs_ac_procrustes_map_coords", (DL_FUNC) &_Racmacs_ac_procrustes_map_coords, 6},
    {"_Racmacs_ac_procrustes_map_data", (DL_FUNC) &_Racmacs_ac_procrustes_map_data, 2},
    {"_Racmacs_ac_coord_dists", (DL_FUNC) &_Racmacs_ac_coord_dists, 2},
    {"_Racmacs_ac_coordDistMatrix", (DL_FUNC) &_Racmacs_ac_coordDistMatrix, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Racmacs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
