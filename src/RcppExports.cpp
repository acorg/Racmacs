// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "Racmacs_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ac_ag_names
std::vector<std::string> ac_ag_names(const AcMap map);
RcppExport SEXP _Racmacs_ac_ag_names(SEXP mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcMap >::type map(mapSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_ag_names(map));
    return rcpp_result_gen;
END_RCPP
}
// ac_get_ag_coords
arma::mat ac_get_ag_coords(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_get_ag_coords(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_get_ag_coords(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_get_sr_coords
arma::mat ac_get_sr_coords(const AcOptimization opt);
RcppExport SEXP _Racmacs_ac_get_sr_coords(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcOptimization >::type opt(optSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_get_sr_coords(opt));
    return rcpp_result_gen;
END_RCPP
}
// ac_set_ag_coords
AcOptimization ac_set_ag_coords(AcOptimization opt, const arma::mat coords);
RcppExport SEXP _Racmacs_ac_set_ag_coords(SEXP optSEXP, SEXP coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type coords(coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_set_ag_coords(opt, coords));
    return rcpp_result_gen;
END_RCPP
}
// ac_set_sr_coords
AcOptimization ac_set_sr_coords(AcOptimization opt, const arma::mat coords);
RcppExport SEXP _Racmacs_ac_set_sr_coords(SEXP optSEXP, SEXP coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type coords(coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_set_sr_coords(opt, coords));
    return rcpp_result_gen;
END_RCPP
}
// ac_set_min_column_basis
AcOptimization ac_set_min_column_basis(AcOptimization opt, std::string mincolbasis);
RcppExport SEXP _Racmacs_ac_set_min_column_basis(SEXP optSEXP, SEXP mincolbasisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< std::string >::type mincolbasis(mincolbasisSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_set_min_column_basis(opt, mincolbasis));
    return rcpp_result_gen;
END_RCPP
}
// ac_set_fixed_column_bases
AcOptimization ac_set_fixed_column_bases(AcOptimization opt, arma::vec fixed_colbases);
RcppExport SEXP _Racmacs_ac_set_fixed_column_bases(SEXP optSEXP, SEXP fixed_colbasesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fixed_colbases(fixed_colbasesSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_set_fixed_column_bases(opt, fixed_colbases));
    return rcpp_result_gen;
END_RCPP
}
// ac_align_optimization
AcOptimization ac_align_optimization(AcOptimization source_optimization, const AcOptimization target_optimization);
RcppExport SEXP _Racmacs_ac_align_optimization(SEXP source_optimizationSEXP, SEXP target_optimizationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type source_optimization(source_optimizationSEXP);
    Rcpp::traits::input_parameter< const AcOptimization >::type target_optimization(target_optimizationSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_align_optimization(source_optimization, target_optimization));
    return rcpp_result_gen;
END_RCPP
}
// ac_subset_map
AcMap ac_subset_map(AcMap map, const arma::uvec ags, const arma::uvec sr);
RcppExport SEXP _Racmacs_ac_subset_map(SEXP mapSEXP, SEXP agsSEXP, SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcMap >::type map(mapSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type ags(agsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_subset_map(map, ags, sr));
    return rcpp_result_gen;
END_RCPP
}
// ac_table_colbases
arma::vec ac_table_colbases(const AcTiterTable titer_table, const std::string min_col_basis);
RcppExport SEXP _Racmacs_ac_table_colbases(SEXP titer_tableSEXP, SEXP min_col_basisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcTiterTable >::type titer_table(titer_tableSEXP);
    Rcpp::traits::input_parameter< const std::string >::type min_col_basis(min_col_basisSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_table_colbases(titer_table, min_col_basis));
    return rcpp_result_gen;
END_RCPP
}
// ac_table_distances
arma::mat ac_table_distances(const AcTiterTable titer_table, const arma::vec colbases);
RcppExport SEXP _Racmacs_ac_table_distances(SEXP titer_tableSEXP, SEXP colbasesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcTiterTable >::type titer_table(titer_tableSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type colbases(colbasesSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_table_distances(titer_table, colbases));
    return rcpp_result_gen;
END_RCPP
}
// ac_newOptimization
AcOptimization ac_newOptimization(int dimensions, int num_antigens, int num_sera);
RcppExport SEXP _Racmacs_ac_newOptimization(SEXP dimensionsSEXP, SEXP num_antigensSEXP, SEXP num_seraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< int >::type num_antigens(num_antigensSEXP);
    Rcpp::traits::input_parameter< int >::type num_sera(num_seraSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_newOptimization(dimensions, num_antigens, num_sera));
    return rcpp_result_gen;
END_RCPP
}
// ac_relaxOptimization
AcOptimization ac_relaxOptimization(AcOptimization opt, AcTiterTable titers, std::string method, int maxit);
RcppExport SEXP _Racmacs_ac_relaxOptimization(SEXP optSEXP, SEXP titersSEXP, SEXP methodSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcOptimization >::type opt(optSEXP);
    Rcpp::traits::input_parameter< AcTiterTable >::type titers(titersSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_relaxOptimization(opt, titers, method, maxit));
    return rcpp_result_gen;
END_RCPP
}
// ac_dimension_test_map
DimTestOutput ac_dimension_test_map(AcTiterTable titer_table, arma::uvec dimensions_to_test, double test_proportion, std::string minimum_column_basis, bool column_bases_from_full_table, int num_optimizations, std::string method, int maxit, bool dim_annealing);
RcppExport SEXP _Racmacs_ac_dimension_test_map(SEXP titer_tableSEXP, SEXP dimensions_to_testSEXP, SEXP test_proportionSEXP, SEXP minimum_column_basisSEXP, SEXP column_bases_from_full_tableSEXP, SEXP num_optimizationsSEXP, SEXP methodSEXP, SEXP maxitSEXP, SEXP dim_annealingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcTiterTable >::type titer_table(titer_tableSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type dimensions_to_test(dimensions_to_testSEXP);
    Rcpp::traits::input_parameter< double >::type test_proportion(test_proportionSEXP);
    Rcpp::traits::input_parameter< std::string >::type minimum_column_basis(minimum_column_basisSEXP);
    Rcpp::traits::input_parameter< bool >::type column_bases_from_full_table(column_bases_from_full_tableSEXP);
    Rcpp::traits::input_parameter< int >::type num_optimizations(num_optimizationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type dim_annealing(dim_annealingSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_dimension_test_map(titer_table, dimensions_to_test, test_proportion, minimum_column_basis, column_bases_from_full_table, num_optimizations, method, maxit, dim_annealing));
    return rcpp_result_gen;
END_RCPP
}
// ac_match_map_ags
arma::ivec ac_match_map_ags(AcMap const& map1, AcMap const& map2);
RcppExport SEXP _Racmacs_ac_match_map_ags(SEXP map1SEXP, SEXP map2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcMap const& >::type map1(map1SEXP);
    Rcpp::traits::input_parameter< AcMap const& >::type map2(map2SEXP);
    rcpp_result_gen = Rcpp::wrap(ac_match_map_ags(map1, map2));
    return rcpp_result_gen;
END_RCPP
}
// ac_match_map_sr
arma::ivec ac_match_map_sr(AcMap const& map1, AcMap const& map2);
RcppExport SEXP _Racmacs_ac_match_map_sr(SEXP map1SEXP, SEXP map2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcMap const& >::type map1(map1SEXP);
    Rcpp::traits::input_parameter< AcMap const& >::type map2(map2SEXP);
    rcpp_result_gen = Rcpp::wrap(ac_match_map_sr(map1, map2));
    return rcpp_result_gen;
END_RCPP
}
// ac_merge_titers
AcTiter ac_merge_titers(std::vector<AcTiter> titers, double sd_lim);
RcppExport SEXP _Racmacs_ac_merge_titers(SEXP titersSEXP, SEXP sd_limSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcTiter> >::type titers(titersSEXP);
    Rcpp::traits::input_parameter< double >::type sd_lim(sd_limSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_merge_titers(titers, sd_lim));
    return rcpp_result_gen;
END_RCPP
}
// ac_merge_titer_layers
AcTiterTable ac_merge_titer_layers(std::vector<AcTiterTable> titer_layers);
RcppExport SEXP _Racmacs_ac_merge_titer_layers(SEXP titer_layersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcTiterTable> >::type titer_layers(titer_layersSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_merge_titer_layers(titer_layers));
    return rcpp_result_gen;
END_RCPP
}
// ac_merge_map_tables
AcMap ac_merge_map_tables(std::vector<AcMap> maps);
RcppExport SEXP _Racmacs_ac_merge_map_tables(SEXP mapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcMap> >::type maps(mapsSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_merge_map_tables(maps));
    return rcpp_result_gen;
END_RCPP
}
// ac_noisy_bootstrap_map
NoisyBootstrapOutput ac_noisy_bootstrap_map(AcTiterTable titer_table, double ag_noise_sd, double titer_noise_sd, std::string minimum_column_basis, bool column_bases_from_full_table, int num_optimizations, int num_dimensions, std::string method, int maxit, bool dim_annealing);
RcppExport SEXP _Racmacs_ac_noisy_bootstrap_map(SEXP titer_tableSEXP, SEXP ag_noise_sdSEXP, SEXP titer_noise_sdSEXP, SEXP minimum_column_basisSEXP, SEXP column_bases_from_full_tableSEXP, SEXP num_optimizationsSEXP, SEXP num_dimensionsSEXP, SEXP methodSEXP, SEXP maxitSEXP, SEXP dim_annealingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AcTiterTable >::type titer_table(titer_tableSEXP);
    Rcpp::traits::input_parameter< double >::type ag_noise_sd(ag_noise_sdSEXP);
    Rcpp::traits::input_parameter< double >::type titer_noise_sd(titer_noise_sdSEXP);
    Rcpp::traits::input_parameter< std::string >::type minimum_column_basis(minimum_column_basisSEXP);
    Rcpp::traits::input_parameter< bool >::type column_bases_from_full_table(column_bases_from_full_tableSEXP);
    Rcpp::traits::input_parameter< int >::type num_optimizations(num_optimizationsSEXP);
    Rcpp::traits::input_parameter< int >::type num_dimensions(num_dimensionsSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type dim_annealing(dim_annealingSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_noisy_bootstrap_map(titer_table, ag_noise_sd, titer_noise_sd, minimum_column_basis, column_bases_from_full_table, num_optimizations, num_dimensions, method, maxit, dim_annealing));
    return rcpp_result_gen;
END_RCPP
}
// ac_relax_coords
double ac_relax_coords(const arma::mat& tabledist_matrix, const arma::umat& titertype_matrix, arma::mat& ag_coords, arma::mat& sr_coords, const std::string method, const int maxit, bool check_gradient_fn);
RcppExport SEXP _Racmacs_ac_relax_coords(SEXP tabledist_matrixSEXP, SEXP titertype_matrixSEXP, SEXP ag_coordsSEXP, SEXP sr_coordsSEXP, SEXP methodSEXP, SEXP maxitSEXP, SEXP check_gradient_fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type tabledist_matrix(tabledist_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type titertype_matrix(titertype_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ag_coords(ag_coordsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sr_coords(sr_coordsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type check_gradient_fn(check_gradient_fnSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_relax_coords(tabledist_matrix, titertype_matrix, ag_coords, sr_coords, method, maxit, check_gradient_fn));
    return rcpp_result_gen;
END_RCPP
}
// random_coords
arma::mat random_coords(int nrow, int ndim, double min, double max);
RcppExport SEXP _Racmacs_random_coords(SEXP nrowSEXP, SEXP ndimSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(random_coords(nrow, ndim, min, max));
    return rcpp_result_gen;
END_RCPP
}
// ac_runBoxedOptimization
AcOptimization ac_runBoxedOptimization(const arma::mat& tabledist_matrix, const arma::umat& titertype_matrix, const int& num_dims, const double coord_boxsize, const std::string method, const int maxit, const bool dim_annealing);
RcppExport SEXP _Racmacs_ac_runBoxedOptimization(SEXP tabledist_matrixSEXP, SEXP titertype_matrixSEXP, SEXP num_dimsSEXP, SEXP coord_boxsizeSEXP, SEXP methodSEXP, SEXP maxitSEXP, SEXP dim_annealingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type tabledist_matrix(tabledist_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type titertype_matrix(titertype_matrixSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_dims(num_dimsSEXP);
    Rcpp::traits::input_parameter< const double >::type coord_boxsize(coord_boxsizeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const bool >::type dim_annealing(dim_annealingSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_runBoxedOptimization(tabledist_matrix, titertype_matrix, num_dims, coord_boxsize, method, maxit, dim_annealing));
    return rcpp_result_gen;
END_RCPP
}
// ac_runOptimizations
std::vector<AcOptimization> ac_runOptimizations(const AcTiterTable& titertable, arma::vec& colbases, const int& num_dims, const int& num_optimizations, const std::string& method, const int& maxit, const bool& dim_annealing);
RcppExport SEXP _Racmacs_ac_runOptimizations(SEXP titertableSEXP, SEXP colbasesSEXP, SEXP num_dimsSEXP, SEXP num_optimizationsSEXP, SEXP methodSEXP, SEXP maxitSEXP, SEXP dim_annealingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const AcTiterTable& >::type titertable(titertableSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type colbases(colbasesSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_dims(num_dimsSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_optimizations(num_optimizationsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const bool& >::type dim_annealing(dim_annealingSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_runOptimizations(titertable, colbases, num_dims, num_optimizations, method, maxit, dim_annealing));
    return rcpp_result_gen;
END_RCPP
}
// reduce_matrix_dimensions
arma::mat reduce_matrix_dimensions(arma::mat m, int dim);
RcppExport SEXP _Racmacs_reduce_matrix_dimensions(SEXP mSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_matrix_dimensions(m, dim));
    return rcpp_result_gen;
END_RCPP
}
// ac_stress_blob_grid_2d
StressBlobGrid2d ac_stress_blob_grid_2d(arma::vec testcoords, arma::mat coords, arma::vec tabledists, arma::uvec titertypes, double stress_lim, double grid_spacing);
RcppExport SEXP _Racmacs_ac_stress_blob_grid_2d(SEXP testcoordsSEXP, SEXP coordsSEXP, SEXP tabledistsSEXP, SEXP titertypesSEXP, SEXP stress_limSEXP, SEXP grid_spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type testcoords(testcoordsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tabledists(tabledistsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type titertypes(titertypesSEXP);
    Rcpp::traits::input_parameter< double >::type stress_lim(stress_limSEXP);
    Rcpp::traits::input_parameter< double >::type grid_spacing(grid_spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_stress_blob_grid_2d(testcoords, coords, tabledists, titertypes, stress_lim, grid_spacing));
    return rcpp_result_gen;
END_RCPP
}
// numeric_titers
arma::vec numeric_titers(std::vector<AcTiter> titers);
RcppExport SEXP _Racmacs_numeric_titers(SEXP titersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcTiter> >::type titers(titersSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_titers(titers));
    return rcpp_result_gen;
END_RCPP
}
// log_titers
arma::vec log_titers(std::vector<AcTiter> titers);
RcppExport SEXP _Racmacs_log_titers(SEXP titersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcTiter> >::type titers(titersSEXP);
    rcpp_result_gen = Rcpp::wrap(log_titers(titers));
    return rcpp_result_gen;
END_RCPP
}
// titer_types_int
arma::uvec titer_types_int(std::vector<AcTiter> titers);
RcppExport SEXP _Racmacs_titer_types_int(SEXP titersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<AcTiter> >::type titers(titersSEXP);
    rcpp_result_gen = Rcpp::wrap(titer_types_int(titers));
    return rcpp_result_gen;
END_RCPP
}
// ac_procrustes
Procrustes ac_procrustes(arma::mat X, arma::mat Xstar, bool translation, bool dilation);
RcppExport SEXP _Racmacs_ac_procrustes(SEXP XSEXP, SEXP XstarSEXP, SEXP translationSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xstar(XstarSEXP);
    Rcpp::traits::input_parameter< bool >::type translation(translationSEXP);
    Rcpp::traits::input_parameter< bool >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_procrustes(X, Xstar, translation, dilation));
    return rcpp_result_gen;
END_RCPP
}
// ac_align_coords
arma::mat ac_align_coords(arma::mat source, arma::mat target, bool translation, bool dilation);
RcppExport SEXP _Racmacs_ac_align_coords(SEXP sourceSEXP, SEXP targetSEXP, SEXP translationSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type target(targetSEXP);
    Rcpp::traits::input_parameter< bool >::type translation(translationSEXP);
    Rcpp::traits::input_parameter< bool >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(ac_align_coords(source, target, translation, dilation));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Racmacs_ac_ag_names", (DL_FUNC) &_Racmacs_ac_ag_names, 1},
    {"_Racmacs_ac_get_ag_coords", (DL_FUNC) &_Racmacs_ac_get_ag_coords, 1},
    {"_Racmacs_ac_get_sr_coords", (DL_FUNC) &_Racmacs_ac_get_sr_coords, 1},
    {"_Racmacs_ac_set_ag_coords", (DL_FUNC) &_Racmacs_ac_set_ag_coords, 2},
    {"_Racmacs_ac_set_sr_coords", (DL_FUNC) &_Racmacs_ac_set_sr_coords, 2},
    {"_Racmacs_ac_set_min_column_basis", (DL_FUNC) &_Racmacs_ac_set_min_column_basis, 2},
    {"_Racmacs_ac_set_fixed_column_bases", (DL_FUNC) &_Racmacs_ac_set_fixed_column_bases, 2},
    {"_Racmacs_ac_align_optimization", (DL_FUNC) &_Racmacs_ac_align_optimization, 2},
    {"_Racmacs_ac_subset_map", (DL_FUNC) &_Racmacs_ac_subset_map, 3},
    {"_Racmacs_ac_table_colbases", (DL_FUNC) &_Racmacs_ac_table_colbases, 2},
    {"_Racmacs_ac_table_distances", (DL_FUNC) &_Racmacs_ac_table_distances, 2},
    {"_Racmacs_ac_newOptimization", (DL_FUNC) &_Racmacs_ac_newOptimization, 3},
    {"_Racmacs_ac_relaxOptimization", (DL_FUNC) &_Racmacs_ac_relaxOptimization, 4},
    {"_Racmacs_ac_dimension_test_map", (DL_FUNC) &_Racmacs_ac_dimension_test_map, 9},
    {"_Racmacs_ac_match_map_ags", (DL_FUNC) &_Racmacs_ac_match_map_ags, 2},
    {"_Racmacs_ac_match_map_sr", (DL_FUNC) &_Racmacs_ac_match_map_sr, 2},
    {"_Racmacs_ac_merge_titers", (DL_FUNC) &_Racmacs_ac_merge_titers, 2},
    {"_Racmacs_ac_merge_titer_layers", (DL_FUNC) &_Racmacs_ac_merge_titer_layers, 1},
    {"_Racmacs_ac_merge_map_tables", (DL_FUNC) &_Racmacs_ac_merge_map_tables, 1},
    {"_Racmacs_ac_noisy_bootstrap_map", (DL_FUNC) &_Racmacs_ac_noisy_bootstrap_map, 10},
    {"_Racmacs_ac_relax_coords", (DL_FUNC) &_Racmacs_ac_relax_coords, 7},
    {"_Racmacs_random_coords", (DL_FUNC) &_Racmacs_random_coords, 4},
    {"_Racmacs_ac_runBoxedOptimization", (DL_FUNC) &_Racmacs_ac_runBoxedOptimization, 7},
    {"_Racmacs_ac_runOptimizations", (DL_FUNC) &_Racmacs_ac_runOptimizations, 7},
    {"_Racmacs_reduce_matrix_dimensions", (DL_FUNC) &_Racmacs_reduce_matrix_dimensions, 2},
    {"_Racmacs_ac_stress_blob_grid_2d", (DL_FUNC) &_Racmacs_ac_stress_blob_grid_2d, 6},
    {"_Racmacs_numeric_titers", (DL_FUNC) &_Racmacs_numeric_titers, 1},
    {"_Racmacs_log_titers", (DL_FUNC) &_Racmacs_log_titers, 1},
    {"_Racmacs_titer_types_int", (DL_FUNC) &_Racmacs_titer_types_int, 1},
    {"_Racmacs_ac_procrustes", (DL_FUNC) &_Racmacs_ac_procrustes, 4},
    {"_Racmacs_ac_align_coords", (DL_FUNC) &_Racmacs_ac_align_coords, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_Racmacs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
